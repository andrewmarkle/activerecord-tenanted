#!/usr/bin/env ruby

gem_path     = File.expand_path(File.join(__dir__, "../"))
smarty_path  = File.join(gem_path, "test/smarty")
gemfile      = File.join(smarty_path, "Gemfile")
overlay_path = File.join(gem_path, "test/integration")

ENV["BUNDLE_GEMFILE"] = gemfile
require "bundler/setup"

require "fileutils"
require "tmpdir"
require "yaml"
require "open3"
require "active_support"
require "active_support/core_ext/object" # deep_dup

scenarios = Dir.glob("test/scenarios/*db/*record.rb").map do |path|
  database, models = path.scan(%r{test/scenarios/(.+db)/(.+record).rb}).flatten
  { database: database, models: models }
end

def run_cmd(cmd, verbose: false)
  print "> #{cmd} "

  output = status = nil
  elapsed = ActiveSupport::Benchmark.realtime do
    output, status = Open3.capture2e(cmd)
  end

  puts "(#{elapsed.round(2)}s)"

  puts output if verbose || !status.success? || ENV["CI"]

  abort("ERROR: Command failed") unless status.success?
end

scenarios.each do |scenario|
  # setup the test directory and cleanup
  app_path = Dir.mktmpdir("active_record-tenanted-integration-test-")
  at_exit { FileUtils.remove_entry app_path }
  puts "Creating integration app for #{scenario} at #{app_path}"

  # make a copy of the smarty app
  FileUtils.copy_entry(smarty_path, app_path)

  # generate database file
  database_file = File.join(gem_path, "test/scenarios/#{scenario[:database]}/database.yml")
  database_file_contents = sprintf(File.read(database_file), storage: "storage", db_path: "db")
  database_file_hash = YAML.load(database_file_contents)
  database_file_hash["development"] = database_file_hash["test"].deep_dup
  database_file_hash["development"].each_value do |hash|
    hash["database"] = hash["database"].sub("/test/", "/development/")
  end
  File.write(File.join(app_path, "config/database.yml"), database_file_hash.to_yaml)

  # generate models using ApplicationRecord
  models_file = File.join(gem_path, "test/scenarios/#{scenario[:database]}/#{scenario[:models]}.rb")
  models_file_contents = File.read(models_file)
                           .gsub("TenantedApplicationRecord", "ApplicationRecord")
  File.write(File.join(app_path, "app/models/application_record.rb"), models_file_contents)

  # copy migrations from scenario and smarty app
  FileUtils.mkdir_p(File.join(app_path, "db"))
  FileUtils.cp_r(Dir.glob(File.join(gem_path, "test/scenarios/#{scenario[:database]}/*migrations")),
                 File.join(app_path, "db"))
  FileUtils.cp_r(Dir.glob(File.join(app_path, "db/migrate/*rb")),
                 File.join(app_path, "db/tenanted_migrations"))

  # copy overlay tests and tenanting config
  FileUtils.cp_r(Dir.glob(File.join(overlay_path, "*")), app_path)

  Dir.chdir(app_path) do
    Bundler.with_original_env do
      ENV["BUNDLE_GEMFILE"] = gemfile
      run_cmd("bundle check || bundle install")

      # set up the database and schema files
      run_cmd("bin/rails db:prepare")

      # validate-ish the setup
      prefix = scenario[:database].match?(/\Asecondary/) ? "tenanted_" : ""
      File.exist?("db/#{prefix}schema.rb") || abort("Schema dump not generated")
      File.exist?("db/#{prefix}schema_cache.yml") || abort("Schema cache dump not generated")

      # create a fake tenant database to validate that it is deleted in the test suite
      dev_db = Dir.glob("storage/development/*/development-tenant/main.sqlite3").first
      test_db = dev_db.gsub("/development/", "/test/").gsub("development-tenant", "delete-me")
      FileUtils.mkdir_p(File.dirname(test_db))
      FileUtils.touch(test_db)

      run_cmd("bin/rails test", verbose: true)
    ensure
      ENV["BUNDLE_GEMFILE"] = nil
    end
  end
end
